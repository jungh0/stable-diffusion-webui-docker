name: Docker Image Cron

on:
  # schedule:
  #   - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      release_stage:
        description: 'Release stage of the build'
        required: true
        default: 'master'
      branch_or_tag:
        description: 'Branch or Tag to build'
        required: true
        default: 'master'

jobs:
  check_for_images:
    runs-on: ubuntu-latest
    outputs:
      cuda_tags: ${{ steps.fetch_cuda_tags.outputs.cuda_tags }}
      my_tags: ${{ steps.fetch_my_tags.outputs.my_tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup scripts
        id: setup_scripts
        run: |
          cat << 'EOF' > docker-hub-tags.sh
          #!/bin/bash

          if [ "$#" -ne 2 ]; then
              echo "Usage: $0 <repository_name> <regex_pattern>"
              exit 1
          fi

          REPOSITORY_NAME="$1"
          REGEX_PATTERN="$2"

          BASE_URL="https://registry.hub.docker.com/v2/repositories/$REPOSITORY_NAME/tags"

          PAGE=1
          PAGE_SIZE=100
          TOTAL_COUNT=$(curl -s "$BASE_URL" | jq -r '.count')

          declare -a TAGS_ARRAY

          while [ $(( (PAGE - 1) * PAGE_SIZE )) -lt "$TOTAL_COUNT" ]; do
              TAGS=$(curl -s "$BASE_URL?page=$PAGE&page_size=$PAGE_SIZE" | jq -r '.results[] | {name: .name, last_pushed: .tag_last_pushed}')
              TAGS_ARRAY+=("$TAGS")
              PAGE=$((PAGE + 1))
          done

          SORTED_TAGS=$(printf "%s\n" "${TAGS_ARRAY[@]}" | jq -s 'sort_by(.last_pushed) | reverse')

          # Filter tags by regex pattern if provided
          if [ -n "$REGEX_PATTERN" ]; then
              SORTED_TAGS=$(echo "$SORTED_TAGS" | jq --arg pattern "$REGEX_PATTERN" '[.[] | select(.name | test($pattern))]')
          fi
          echo "$SORTED_TAGS"
          EOF

          chmod +x docker-hub-tags.sh

      - name: Fetch CUDA tags
        id: fetch_cuda_tags
        run: |
          CUDA_TAGS=$(./docker-hub-tags.sh "nvidia/cuda" "\\d{2}\\.\\d{1,2}\\.\\d{1,2}-devel-ubuntu\\d{2}\\.\\d{2}")
          echo "$CUDA_TAGS"

          # Group by CUDA version and pick the latest Ubuntu version
          CUDA_GROUPED_TAGS=$(echo "$CUDA_TAGS" | jq -r '
              .[] | 
              { 
                  cuda: (.name | split("-devel-ubuntu")[0]), 
                  ubuntu: (.name | split("-devel-ubuntu")[1]), 
                  last_pushed: .last_pushed 
              }' | \
              jq -s '
                  group_by(.cuda) |
                  map({
                      cuda: .[0].cuda,
                      ubuntu: map(.ubuntu) | unique | sort | last,
                      last_pushed: map(.last_pushed) | max
                  })
          ')

          echo "cuda_tags=$(echo "$CUDA_GROUPED_TAGS" | jq -c . | tr -d '\n' | sed 's/"/\\"/g')" >> $GITHUB_OUTPUT

      - name: Fetch my tags
        id: fetch_my_tags
        run: |
          MY_TAGS=$(./docker-hub-tags.sh "siutin/stable-diffusion-webui-docker" "cuda-\\d{2}\\.\\d{1,2}\\.\\d{1,2}-v\\d+\\.\\d+\\.\\d+")
          echo "$MY_TAGS"
          echo "my_tags=$(echo "$MY_TAGS" | jq -c . | tr -d '\n' | sed 's/"/\\"/g')" >> $GITHUB_OUTPUT

  trigger_docker_build:
      runs-on: ubuntu-latest
      needs: check_for_images
      if: needs.check_for_images.outputs.cuda_tags != '[]' || needs.check_for_images.outputs.my_tags != '[]'
      steps:
        - name: Trigger Docker Image CI for tags
          run: |
            CUDA_TAGS="${{ needs.check_for_images.outputs.cuda_tags }}"
            MY_TAGS="${{ needs.check_for_images.outputs.my_tags }}"
            BRANCH_OR_TAG="${{ github.event.inputs.branch_or_tag }}"

            # Filter CUDA_TAGS to only include versions that don't exist in MY_TAGS
            FILTERED_CUDA_TAGS=$(echo "$CUDA_TAGS" | jq --arg branch_or_tag "$BRANCH_OR_TAG" --argjson my_tags "$MY_TAGS" '
              . as $cuda_tags |
              ($cuda_tags | map(.prefix = (.cuda + "-" + $branch_or_tag))) |
              map(select(
                .prefix as $version |
                ($my_tags | map(.name | capture("cuda-(?<cuda_version>[0-9.]+)-(?<branch_or_tag>.+)-\\d{4}-\\d{2}-\\d{2}")) | 
                map(.cuda_version + "-" + .branch_or_tag) | 
                contains([$version]) | 
                not)
              )) |
              del(.[].prefix)
            ')

            echo "$FILTERED_CUDA_TAGS" | jq -c '.[]' | while read -r tag; do
                CUDA_VERSION=$(echo "$tag" | jq -r '.cuda')
                UBUNTU_VERSION=$(echo "$tag" | jq -r '.ubuntu')
                echo "Triggering Docker build for CUDA version: $CUDA_VERSION with Ubuntu version: $UBUNTU_VERSION"
                curl -X POST \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  https://api.github.com/repos/${{ github.repository }}/actions/workflows/docker-image.yml/dispatches \
                  -d "{\"ref\":\"main\", \"inputs\": {\"target\": \"cuda\", \"release_stage\": \"${{ github.event.inputs.release_stage }}\", \"branch_or_tag\": \"${{ github.event.inputs.branch_or_tag }}\", \"debian_version\": \"bookworm\", \"cuda_version\": \"$CUDA_VERSION\", \"ubuntu_version\": \"$UBUNTU_VERSION\"}}"
            done